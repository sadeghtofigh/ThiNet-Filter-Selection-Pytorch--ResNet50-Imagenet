import torch

# Shape of each convolutional layer
layer_Shape = {'module.conv1.weight': torch.Size([1, 64, 112, 112]),
                'module.layer1.0.conv1.weight': torch.Size([1, 64, 56, 56]),
                'module.layer1.0.conv2.weight': torch.Size([1, 64, 56, 56]),
                'module.layer1.0.conv3.weight': torch.Size([1, 256, 56, 56]),
                'module.layer1.1.conv1.weight': torch.Size([1, 64, 56, 56]),
                'module.layer1.1.conv2.weight': torch.Size([1, 64, 56, 56]),
               'module.layer1.1.conv3.weight': torch.Size([1, 256, 56, 56]),
               'module.layer1.2.conv1.weight': torch.Size([1, 64, 56, 56]),
               'module.layer1.2.conv2.weight': torch.Size([1, 64, 56, 56]),
               'module.layer1.2.conv3.weight': torch.Size([1, 256, 56, 56]),
               'module.layer2.0.conv1.weight': torch.Size([1, 128, 56, 56]),
               'module.layer2.0.conv2.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.0.conv3.weight': torch.Size([1, 512, 28, 28]),
               'module.layer2.1.conv1.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.1.conv2.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.1.conv3.weight': torch.Size([1, 512, 28, 28]),
               'module.layer2.2.conv1.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.2.conv2.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.2.conv3.weight': torch.Size([1, 512, 28, 28]),
               'module.layer2.3.conv1.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.3.conv2.weight': torch.Size([1, 128, 28, 28]),
               'module.layer2.3.conv3.weight': torch.Size([1, 512, 28, 28]),
               'module.layer3.0.conv1.weight': torch.Size([1, 256, 28, 28]),
               'module.layer3.0.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.0.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer3.1.conv1.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.1.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.1.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer3.2.conv1.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.2.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.2.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer3.3.conv1.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.3.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.3.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer3.4.conv1.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.4.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.4.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer3.5.conv1.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.5.conv2.weight': torch.Size([1, 256, 14, 14]),
               'module.layer3.5.conv3.weight': torch.Size([1, 1024, 14, 14]),
               'module.layer4.0.conv1.weight': torch.Size([1, 512, 14, 14]),
               'module.layer4.0.conv2.weight': torch.Size([1, 512, 7, 7]),
               'module.layer4.0.conv3.weight': torch.Size([1, 2048, 7, 7]),
               'module.layer4.1.conv1.weight': torch.Size([1, 512, 7, 7]),
               'module.layer4.1.conv2.weight': torch.Size([1, 512, 7, 7]),
               'module.layer4.1.conv3.weight': torch.Size([1, 2048, 7, 7]),
               'module.layer4.2.conv1.weight': torch.Size([1, 512, 7, 7]),
               'module.layer4.2.conv2.weight': torch.Size([1, 512, 7, 7]),
               'module.layer4.2.conv3.weight': torch.Size([1, 2048, 7, 7])}

# key name of each convolutional layer in the checkpoint
next_layer_ind = {0: 'module.layer1.0.conv1', 3: 'module.layer1.0.conv2', 6: 'module.layer1.0.conv3',
                  9: 'module.layer1.1.conv1', 15: 'module.layer1.1.conv2', 18: 'module.layer1.1.conv3',
                  21: 'module.layer1.2.conv1', 24: 'module.layer1.2.conv2', 27: 'module.layer1.2.conv3',
                  30: 'module.layer2.0.conv1', 33: 'module.layer2.0.conv2', 36: 'module.layer2.0.conv3',
                  39: 'module.layer2.1.conv1', 45: 'module.layer2.1.conv2', 48: 'module.layer2.1.conv3',
                  51: 'module.layer2.2.conv1', 54: 'module.layer2.2.conv2', 57: 'module.layer2.2.conv3',
                  60: 'module.layer2.3.conv1', 63: 'module.layer2.3.conv2', 66: 'module.layer2.3.conv3',
                  69: 'module.layer3.0.conv1', 72: 'module.layer3.0.conv2', 75: 'module.layer3.0.conv3',
                  78: 'module.layer3.1.conv1', 84: 'module.layer3.1.conv2', 87: 'module.layer3.1.conv3',
                  90: 'module.layer3.2.conv1', 93: 'module.layer3.2.conv2', 96: 'module.layer3.2.conv3',
                  99: 'module.layer3.3.conv1', 102: 'module.layer3.3.conv2', 105: 'module.layer3.3.conv3',
                  108: 'module.layer3.4.conv1', 111: 'module.layer3.4.conv2', 114: 'module.layer3.4.conv3',
                  117: 'module.layer3.5.conv1', 120: 'module.layer3.5.conv2', 123: 'module.layer3.5.conv3',
                  126: 'module.layer4.0.conv1', 129: 'module.layer4.0.conv2', 132: 'module.layer4.0.conv3',
                  135: 'module.layer4.1.conv1', 141: 'module.layer4.1.conv2', 144: 'module.layer4.1.conv3',
                  147: 'module.layer4.2.conv1', 150: 'module.layer4.2.conv2', 153: 'module.layer4.2.conv3'}

# index of the convolutional layers
MI = [0, 3, 6, 9, 15, 18, 21, 24, 27, 30, 33, 36, 39, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78,
      84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 141, 144,
      147, 150, 153]
